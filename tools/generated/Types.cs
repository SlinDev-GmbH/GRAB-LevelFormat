// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace COD.Types {

  /// <summary>Holder for reflection information generated from types.proto</summary>
  public static partial class TypesReflection {

    #region Descriptor
    /// <summary>File descriptor for types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgt0eXBlcy5wcm90bxIJQ09ELlR5cGVzIikKBlZlY3RvchIJCgF4GAEgASgC",
            "EgkKAXkYAiABKAISCQoBehgDIAEoAiIfCgdWZWN0b3IyEgkKAXgYASABKAIS",
            "CQoBeRgCIAEoAiI4CgpRdWF0ZXJuaW9uEgkKAXgYASABKAISCQoBeRgCIAEo",
            "AhIJCgF6GAMgASgCEgkKAXcYBCABKAIiMwoFQ29sb3ISCQoBchgBIAEoAhIJ",
            "CgFnGAIgASgCEgkKAWIYAyABKAISCQoBYRgEIAEoAiK1AQoQQW1iaWVuY2VT",
            "ZXR0aW5ncxIoCg5za3laZW5pdGhDb2xvchgBIAEoCzIQLkNPRC5UeXBlcy5D",
            "b2xvchIpCg9za3lIb3Jpem9uQ29sb3IYAiABKAsyEC5DT0QuVHlwZXMuQ29s",
            "b3ISEwoLc3VuQWx0aXR1ZGUYAyABKAISEgoKc3VuQXppbXV0aBgEIAEoAhIP",
            "CgdzdW5TaXplGAUgASgCEhIKCmZvZ0RlbnNpdHkYBiABKAIiqgEKDkxldmVs",
            "Tm9kZUdyb3VwEiMKCHBvc2l0aW9uGAEgASgLMhEuQ09ELlR5cGVzLlZlY3Rv",
            "chIgCgVzY2FsZRgCIAEoCzIRLkNPRC5UeXBlcy5WZWN0b3ISJwoIcm90YXRp",
            "b24YAyABKAsyFS5DT0QuVHlwZXMuUXVhdGVybmlvbhIoCgpjaGlsZE5vZGVz",
            "GAQgAygLMhQuQ09ELlR5cGVzLkxldmVsTm9kZSJ8Cg5MZXZlbE5vZGVTdGFy",
            "dBIjCghwb3NpdGlvbhgBIAEoCzIRLkNPRC5UeXBlcy5WZWN0b3ISJwoIcm90",
            "YXRpb24YAiABKAsyFS5DT0QuVHlwZXMuUXVhdGVybmlvbhIOCgZyYWRpdXMY",
            "AyABKAISDAoEbmFtZRgEIAEoCSJGCg9MZXZlbE5vZGVGaW5pc2gSIwoIcG9z",
            "aXRpb24YASABKAsyES5DT0QuVHlwZXMuVmVjdG9yEg4KBnJhZGl1cxgCIAEo",
            "AiLGAgoPTGV2ZWxOb2RlU3RhdGljEigKBXNoYXBlGAEgASgOMhkuQ09ELlR5",
            "cGVzLkxldmVsTm9kZVNoYXBlEi4KCG1hdGVyaWFsGAIgASgOMhwuQ09ELlR5",
            "cGVzLkxldmVsTm9kZU1hdGVyaWFsEiMKCHBvc2l0aW9uGAMgASgLMhEuQ09E",
            "LlR5cGVzLlZlY3RvchIgCgVzY2FsZRgEIAEoCzIRLkNPRC5UeXBlcy5WZWN0",
            "b3ISJwoIcm90YXRpb24YBSABKAsyFS5DT0QuVHlwZXMuUXVhdGVybmlvbhIg",
            "CgZjb2xvcjEYBiABKAsyEC5DT0QuVHlwZXMuQ29sb3ISIAoGY29sb3IyGAkg",
            "ASgLMhAuQ09ELlR5cGVzLkNvbG9yEg4KBmlzTmVvbhgHIAEoCBIVCg1pc1Ry",
            "YW5zcGFyZW50GAggASgIIocCChJMZXZlbE5vZGVDcnVtYmxpbmcSKAoFc2hh",
            "cGUYASABKA4yGS5DT0QuVHlwZXMuTGV2ZWxOb2RlU2hhcGUSLgoIbWF0ZXJp",
            "YWwYAiABKA4yHC5DT0QuVHlwZXMuTGV2ZWxOb2RlTWF0ZXJpYWwSIwoIcG9z",
            "aXRpb24YAyABKAsyES5DT0QuVHlwZXMuVmVjdG9yEiAKBXNjYWxlGAQgASgL",
            "MhEuQ09ELlR5cGVzLlZlY3RvchInCghyb3RhdGlvbhgFIAEoCzIVLkNPRC5U",
            "eXBlcy5RdWF0ZXJuaW9uEhIKCnN0YWJsZVRpbWUYBiABKAISEwoLcmVzcGF3",
            "blRpbWUYByABKAIiawoNTGV2ZWxOb2RlU2lnbhIjCghwb3NpdGlvbhgBIAEo",
            "CzIRLkNPRC5UeXBlcy5WZWN0b3ISJwoIcm90YXRpb24YAiABKAsyFS5DT0Qu",
            "VHlwZXMuUXVhdGVybmlvbhIMCgR0ZXh0GAMgASgJIvkBChBMZXZlbE5vZGVH",
            "cmF2aXR5Ei4KBG1vZGUYASABKA4yIC5DT0QuVHlwZXMuTGV2ZWxOb2RlR3Jh",
            "dml0eS5Nb2RlEiMKCHBvc2l0aW9uGAIgASgLMhEuQ09ELlR5cGVzLlZlY3Rv",
            "chIgCgVzY2FsZRgDIAEoCzIRLkNPRC5UeXBlcy5WZWN0b3ISJwoIcm90YXRp",
            "b24YBCABKAsyFS5DT0QuVHlwZXMuUXVhdGVybmlvbhIkCglkaXJlY3Rpb24Y",
            "BSABKAsyES5DT0QuVHlwZXMuVmVjdG9yIh8KBE1vZGUSCwoHREVGQVVMVBAA",
            "EgoKBk5PTEVHUxABImYKFkxldmVsTm9kZUxvYmJ5VGVybWluYWwSIwoIcG9z",
            "aXRpb24YAiABKAsyES5DT0QuVHlwZXMuVmVjdG9yEicKCHJvdGF0aW9uGAQg",
            "ASgLMhUuQ09ELlR5cGVzLlF1YXRlcm5pb24irwQKGExldmVsTm9kZVBhcnRp",
            "Y2xlRW1pdHRlchIjCghwb3NpdGlvbhgBIAEoCzIRLkNPRC5UeXBlcy5WZWN0",
            "b3ISIAoFc2NhbGUYAiABKAsyES5DT0QuVHlwZXMuVmVjdG9yEicKCHJvdGF0",
            "aW9uGAMgASgLMhUuQ09ELlR5cGVzLlF1YXRlcm5pb24SGgoScGFydGljbGVz",
            "UGVyU2Vjb25kGAUgASgNEiQKCGxpZmVTcGFuGAYgASgLMhIuQ09ELlR5cGVz",
            "LlZlY3RvcjISJAoKc3RhcnRDb2xvchgHIAEoCzIQLkNPRC5UeXBlcy5Db2xv",
            "chIiCghlbmRDb2xvchgIIAEoCzIQLkNPRC5UeXBlcy5Db2xvchIlCglzdGFy",
            "dFNpemUYCSABKAsyEi5DT0QuVHlwZXMuVmVjdG9yMhIjCgdlbmRTaXplGAog",
            "ASgLMhIuQ09ELlR5cGVzLlZlY3RvcjISIwoIdmVsb2NpdHkYDiABKAsyES5D",
            "T0QuVHlwZXMuVmVjdG9yEiYKC3ZlbG9jaXR5TWluGA8gASgLMhEuQ09ELlR5",
            "cGVzLlZlY3RvchImCgt2ZWxvY2l0eU1heBgQIAEoCzIRLkNPRC5UeXBlcy5W",
            "ZWN0b3ISKgoPYWNjZWxlcmF0aW9uTWluGBEgASgLMhEuQ09ELlR5cGVzLlZl",
            "Y3RvchIqCg9hY2NlbGVyYXRpb25NYXgYEiABKAsyES5DT0QuVHlwZXMuVmVj",
            "dG9yIoQBChJUcmlnZ2VyU291cmNlQmFzaWMSMAoEdHlwZRgBIAEoDjIiLkNP",
            "RC5UeXBlcy5UcmlnZ2VyU291cmNlQmFzaWMuVHlwZSI8CgRUeXBlEggKBEhB",
            "TkQQABIICgRIRUFEEAESCwoHR1JBUFBMRRACEggKBEZFRVQQAxIJCgVCTE9D",
            "SxAEIlcKDVRyaWdnZXJTb3VyY2USOwoSdHJpZ2dlclNvdXJjZUJhc2ljGAEg",
            "ASgLMh0uQ09ELlR5cGVzLlRyaWdnZXJTb3VyY2VCYXNpY0gAQgkKB2NvbnRl",
            "bnQi6wEKFlRyaWdnZXJUYXJnZXRBbmltYXRpb24SEAoIb2JqZWN0SUQYASAB",
            "KAQSFQoNYW5pbWF0aW9uTmFtZRgCIAEoCRIMCgRsb29wGAMgASgIEg8KB3Jl",
            "dmVyc2UYBCABKAgSNAoEbW9kZRgKIAEoDjImLkNPRC5UeXBlcy5UcmlnZ2Vy",
            "VGFyZ2V0QW5pbWF0aW9uLk1vZGUiUwoETW9kZRIICgRTVE9QEAASCQoFU1RB",
            "UlQQARIKCgZUT0dHTEUQAhISCg5UT0dHTEVfUkVWRVJTRRADEgsKB1JFU1RB",
            "UlQQBBIJCgVSRVNFVBAFIkQKFVRyaWdnZXJUYXJnZXRTdWJMZXZlbBIXCg9s",
            "ZXZlbElkZW50aWZpZXIYASABKAkSEgoKc3Bhd25Qb2ludBgCIAEoCSKiAQoN",
            "VHJpZ2dlclRhcmdldBJDChZ0cmlnZ2VyVGFyZ2V0QW5pbWF0aW9uGAEgASgL",
            "MiEuQ09ELlR5cGVzLlRyaWdnZXJUYXJnZXRBbmltYXRpb25IABJBChV0cmln",
            "Z2VyVGFyZ2V0U3ViTGV2ZWwYAiABKAsyIC5DT0QuVHlwZXMuVHJpZ2dlclRh",
            "cmdldFN1YkxldmVsSABCCQoHY29udGVudCKiAgoQTGV2ZWxOb2RlVHJpZ2dl",
            "chIoCgVzaGFwZRgBIAEoDjIZLkNPRC5UeXBlcy5MZXZlbE5vZGVTaGFwZRIj",
            "Cghwb3NpdGlvbhgCIAEoCzIRLkNPRC5UeXBlcy5WZWN0b3ISIAoFc2NhbGUY",
            "AyABKAsyES5DT0QuVHlwZXMuVmVjdG9yEicKCHJvdGF0aW9uGAQgASgLMhUu",
            "Q09ELlR5cGVzLlF1YXRlcm5pb24SEAoIaXNTaGFyZWQYBSABKAgSMAoOdHJp",
            "Z2dlclNvdXJjZXMYBiADKAsyGC5DT0QuVHlwZXMuVHJpZ2dlclNvdXJjZRIw",
            "Cg50cmlnZ2VyVGFyZ2V0cxgHIAMoCzIYLkNPRC5UeXBlcy5UcmlnZ2VyVGFy",
            "Z2V0ImwKDkFuaW1hdGlvbkZyYW1lEgwKBHRpbWUYASABKAISIwoIcG9zaXRp",
            "b24YAiABKAsyES5DT0QuVHlwZXMuVmVjdG9yEicKCHJvdGF0aW9uGAMgASgL",
            "MhUuQ09ELlR5cGVzLlF1YXRlcm5pb24irgEKCUFuaW1hdGlvbhIMCgRuYW1l",
            "GAEgASgJEikKBmZyYW1lcxgCIAMoCzIZLkNPRC5UeXBlcy5BbmltYXRpb25G",
            "cmFtZRIxCglkaXJlY3Rpb24YAyABKA4yHi5DT0QuVHlwZXMuQW5pbWF0aW9u",
            "LkRpcmVjdGlvbhINCgVzcGVlZBgEIAEoAiImCglEaXJlY3Rpb24SCwoHUkVT",
            "VEFSVBAAEgwKCFBJTkdQT05HEAEiswUKCUxldmVsTm9kZRIQCghpc0xvY2tl",
            "ZBgGIAEoCBIzCg5sZXZlbE5vZGVTdGFydBgBIAEoCzIZLkNPRC5UeXBlcy5M",
            "ZXZlbE5vZGVTdGFydEgAEjUKD2xldmVsTm9kZUZpbmlzaBgCIAEoCzIaLkNP",
            "RC5UeXBlcy5MZXZlbE5vZGVGaW5pc2hIABI1Cg9sZXZlbE5vZGVTdGF0aWMY",
            "AyABKAsyGi5DT0QuVHlwZXMuTGV2ZWxOb2RlU3RhdGljSAASMQoNbGV2ZWxO",
            "b2RlU2lnbhgEIAEoCzIYLkNPRC5UeXBlcy5MZXZlbE5vZGVTaWduSAASOwoS",
            "bGV2ZWxOb2RlQ3J1bWJsaW5nGAUgASgLMh0uQ09ELlR5cGVzLkxldmVsTm9k",
            "ZUNydW1ibGluZ0gAEjMKDmxldmVsTm9kZUdyb3VwGAcgASgLMhkuQ09ELlR5",
            "cGVzLkxldmVsTm9kZUdyb3VwSAASNwoQbGV2ZWxOb2RlR3Jhdml0eRgIIAEo",
            "CzIbLkNPRC5UeXBlcy5MZXZlbE5vZGVHcmF2aXR5SAASQwoWbGV2ZWxOb2Rl",
            "TG9iYnlUZXJtaW5hbBgJIAEoCzIhLkNPRC5UeXBlcy5MZXZlbE5vZGVMb2Ji",
            "eVRlcm1pbmFsSAASNwoQbGV2ZWxOb2RlVHJpZ2dlchgKIAEoCzIbLkNPRC5U",
            "eXBlcy5MZXZlbE5vZGVUcmlnZ2VySAASRwoYbGV2ZWxOb2RlUGFydGljbGVF",
            "bWl0dGVyGAsgASgLMiMuQ09ELlR5cGVzLkxldmVsTm9kZVBhcnRpY2xlRW1p",
            "dHRlckgAEigKCmFuaW1hdGlvbnMYDyADKAsyFC5DT0QuVHlwZXMuQW5pbWF0",
            "aW9uEhcKD2FjdGl2ZUFuaW1hdGlvbhgQIAEoBUIJCgdjb250ZW50KtEBCg5M",
            "ZXZlbE5vZGVTaGFwZRIJCgVTVEFSVBAAEgoKBkZJTklTSBABEggKBFNJR04Q",
            "AhILCgdHUkFWSVRZEAMSEQoNTE9CQllURVJNSU5BTBAEEhQKEFBBUlRJQ0xF",
            "X0VNSVRURVIQBRIcChhfX0VORF9PRl9TUEVDSUFMX1BBUlRTX18QBhIJCgRD",
            "VUJFEOgHEgsKBlNQSEVSRRDpBxINCghDWUxJTkRFUhDqBxIMCgdQWVJBTUlE",
            "EOsHEgoKBVBSSVNNEOwHEgkKBENPTkUQ7QcqxAEKEUxldmVsTm9kZU1hdGVy",
            "aWFsEgsKB0RFRkFVTFQQABINCglHUkFCQkFCTEUQARIHCgNJQ0UQAhIICgRM",
            "QVZBEAMSCAoEV09PRBAEEg4KCkdSQVBQTEFCTEUQBRITCg9HUkFQUExBQkxF",
            "X0xBVkEQBhIXChNHUkFCQkFCTEVfQ1JVTUJMSU5HEAcSEwoPREVGQVVMVF9D",
            "T0xPUkVEEAgSDAoIQk9VTkNJTkcQCRIICgRTTk9XEAoSCwoHVFJJR0dFUhAL",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::COD.Types.LevelNodeShape), typeof(global::COD.Types.LevelNodeMaterial), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.Vector), global::COD.Types.Vector.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.Vector2), global::COD.Types.Vector2.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.Quaternion), global::COD.Types.Quaternion.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.Color), global::COD.Types.Color.Parser, new[]{ "R", "G", "B", "A" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.AmbienceSettings), global::COD.Types.AmbienceSettings.Parser, new[]{ "SkyZenithColor", "SkyHorizonColor", "SunAltitude", "SunAzimuth", "SunSize", "FogDensity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeGroup), global::COD.Types.LevelNodeGroup.Parser, new[]{ "Position", "Scale", "Rotation", "ChildNodes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeStart), global::COD.Types.LevelNodeStart.Parser, new[]{ "Position", "Rotation", "Radius", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeFinish), global::COD.Types.LevelNodeFinish.Parser, new[]{ "Position", "Radius" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeStatic), global::COD.Types.LevelNodeStatic.Parser, new[]{ "Shape", "Material", "Position", "Scale", "Rotation", "Color1", "Color2", "IsNeon", "IsTransparent" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeCrumbling), global::COD.Types.LevelNodeCrumbling.Parser, new[]{ "Shape", "Material", "Position", "Scale", "Rotation", "StableTime", "RespawnTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeSign), global::COD.Types.LevelNodeSign.Parser, new[]{ "Position", "Rotation", "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeGravity), global::COD.Types.LevelNodeGravity.Parser, new[]{ "Mode", "Position", "Scale", "Rotation", "Direction" }, null, new[]{ typeof(global::COD.Types.LevelNodeGravity.Types.Mode) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeLobbyTerminal), global::COD.Types.LevelNodeLobbyTerminal.Parser, new[]{ "Position", "Rotation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeParticleEmitter), global::COD.Types.LevelNodeParticleEmitter.Parser, new[]{ "Position", "Scale", "Rotation", "ParticlesPerSecond", "LifeSpan", "StartColor", "EndColor", "StartSize", "EndSize", "Velocity", "VelocityMin", "VelocityMax", "AccelerationMin", "AccelerationMax" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.TriggerSourceBasic), global::COD.Types.TriggerSourceBasic.Parser, new[]{ "Type" }, null, new[]{ typeof(global::COD.Types.TriggerSourceBasic.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.TriggerSource), global::COD.Types.TriggerSource.Parser, new[]{ "TriggerSourceBasic" }, new[]{ "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.TriggerTargetAnimation), global::COD.Types.TriggerTargetAnimation.Parser, new[]{ "ObjectID", "AnimationName", "Loop", "Reverse", "Mode" }, null, new[]{ typeof(global::COD.Types.TriggerTargetAnimation.Types.Mode) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.TriggerTargetSubLevel), global::COD.Types.TriggerTargetSubLevel.Parser, new[]{ "LevelIdentifier", "SpawnPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.TriggerTarget), global::COD.Types.TriggerTarget.Parser, new[]{ "TriggerTargetAnimation", "TriggerTargetSubLevel" }, new[]{ "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeTrigger), global::COD.Types.LevelNodeTrigger.Parser, new[]{ "Shape", "Position", "Scale", "Rotation", "IsShared", "TriggerSources", "TriggerTargets" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.AnimationFrame), global::COD.Types.AnimationFrame.Parser, new[]{ "Time", "Position", "Rotation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.Animation), global::COD.Types.Animation.Parser, new[]{ "Name", "Frames", "Direction", "Speed" }, null, new[]{ typeof(global::COD.Types.Animation.Types.Direction) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNode), global::COD.Types.LevelNode.Parser, new[]{ "IsLocked", "LevelNodeStart", "LevelNodeFinish", "LevelNodeStatic", "LevelNodeSign", "LevelNodeCrumbling", "LevelNodeGroup", "LevelNodeGravity", "LevelNodeLobbyTerminal", "LevelNodeTrigger", "LevelNodeParticleEmitter", "Animations", "ActiveAnimation" }, new[]{ "Content" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum LevelNodeShape {
    [pbr::OriginalName("START")] Start = 0,
    [pbr::OriginalName("FINISH")] Finish = 1,
    [pbr::OriginalName("SIGN")] Sign = 2,
    [pbr::OriginalName("GRAVITY")] Gravity = 3,
    [pbr::OriginalName("LOBBYTERMINAL")] Lobbyterminal = 4,
    [pbr::OriginalName("PARTICLE_EMITTER")] ParticleEmitter = 5,
    [pbr::OriginalName("__END_OF_SPECIAL_PARTS__")] EndOfSpecialParts = 6,
    [pbr::OriginalName("CUBE")] Cube = 1000,
    [pbr::OriginalName("SPHERE")] Sphere = 1001,
    [pbr::OriginalName("CYLINDER")] Cylinder = 1002,
    [pbr::OriginalName("PYRAMID")] Pyramid = 1003,
    [pbr::OriginalName("PRISM")] Prism = 1004,
    [pbr::OriginalName("CONE")] Cone = 1005,
  }

  public enum LevelNodeMaterial {
    [pbr::OriginalName("DEFAULT")] Default = 0,
    [pbr::OriginalName("GRABBABLE")] Grabbable = 1,
    [pbr::OriginalName("ICE")] Ice = 2,
    [pbr::OriginalName("LAVA")] Lava = 3,
    [pbr::OriginalName("WOOD")] Wood = 4,
    [pbr::OriginalName("GRAPPLABLE")] Grapplable = 5,
    [pbr::OriginalName("GRAPPLABLE_LAVA")] GrapplableLava = 6,
    [pbr::OriginalName("GRABBABLE_CRUMBLING")] GrabbableCrumbling = 7,
    [pbr::OriginalName("DEFAULT_COLORED")] DefaultColored = 8,
    [pbr::OriginalName("BOUNCING")] Bouncing = 9,
    [pbr::OriginalName("SNOW")] Snow = 10,
    /// <summary>
    ///Not actually written into files and the number on this could be changed without issues. Only used as enum value internally.
    /// </summary>
    [pbr::OriginalName("TRIGGER")] Trigger = 11,
  }

  #endregion

  #region Messages
  public sealed partial class Vector : pb::IMessage<Vector>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Vector> _parser = new pb::MessageParser<Vector>(() => new Vector());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector(Vector other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector Clone() {
      return new Vector(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Vector2 : pb::IMessage<Vector2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Vector2> _parser = new pb::MessageParser<Vector2>(() => new Vector2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2(Vector2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2 Clone() {
      return new Vector2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Quaternion : pb::IMessage<Quaternion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Quaternion> _parser = new pb::MessageParser<Quaternion>(() => new Quaternion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion(Quaternion other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion Clone() {
      return new Quaternion(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (W != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quaternion other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.W != 0F) {
        W = other.W;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Color : pb::IMessage<Color>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color(Color other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
      a_ = other.a_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color Clone() {
      return new Color(this);
    }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 1;
    private float r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 2;
    private float g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 3;
    private float b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 4;
    private float a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(R, other.R)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(G, other.G)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(B, other.B)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(A, other.A)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(R);
      if (G != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(G);
      if (B != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(B);
      if (A != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(A);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (R != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(R);
      }
      if (G != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(G);
      }
      if (B != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(B);
      }
      if (A != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(A);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (R != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(R);
      }
      if (G != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(G);
      }
      if (B != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(B);
      }
      if (A != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(A);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0F) {
        size += 1 + 4;
      }
      if (G != 0F) {
        size += 1 + 4;
      }
      if (B != 0F) {
        size += 1 + 4;
      }
      if (A != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.R != 0F) {
        R = other.R;
      }
      if (other.G != 0F) {
        G = other.G;
      }
      if (other.B != 0F) {
        B = other.B;
      }
      if (other.A != 0F) {
        A = other.A;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            R = input.ReadFloat();
            break;
          }
          case 21: {
            G = input.ReadFloat();
            break;
          }
          case 29: {
            B = input.ReadFloat();
            break;
          }
          case 37: {
            A = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            R = input.ReadFloat();
            break;
          }
          case 21: {
            G = input.ReadFloat();
            break;
          }
          case 29: {
            B = input.ReadFloat();
            break;
          }
          case 37: {
            A = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AmbienceSettings : pb::IMessage<AmbienceSettings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AmbienceSettings> _parser = new pb::MessageParser<AmbienceSettings>(() => new AmbienceSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AmbienceSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AmbienceSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AmbienceSettings(AmbienceSettings other) : this() {
      skyZenithColor_ = other.skyZenithColor_ != null ? other.skyZenithColor_.Clone() : null;
      skyHorizonColor_ = other.skyHorizonColor_ != null ? other.skyHorizonColor_.Clone() : null;
      sunAltitude_ = other.sunAltitude_;
      sunAzimuth_ = other.sunAzimuth_;
      sunSize_ = other.sunSize_;
      fogDensity_ = other.fogDensity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AmbienceSettings Clone() {
      return new AmbienceSettings(this);
    }

    /// <summary>Field number for the "skyZenithColor" field.</summary>
    public const int SkyZenithColorFieldNumber = 1;
    private global::COD.Types.Color skyZenithColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Color SkyZenithColor {
      get { return skyZenithColor_; }
      set {
        skyZenithColor_ = value;
      }
    }

    /// <summary>Field number for the "skyHorizonColor" field.</summary>
    public const int SkyHorizonColorFieldNumber = 2;
    private global::COD.Types.Color skyHorizonColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Color SkyHorizonColor {
      get { return skyHorizonColor_; }
      set {
        skyHorizonColor_ = value;
      }
    }

    /// <summary>Field number for the "sunAltitude" field.</summary>
    public const int SunAltitudeFieldNumber = 3;
    private float sunAltitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SunAltitude {
      get { return sunAltitude_; }
      set {
        sunAltitude_ = value;
      }
    }

    /// <summary>Field number for the "sunAzimuth" field.</summary>
    public const int SunAzimuthFieldNumber = 4;
    private float sunAzimuth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SunAzimuth {
      get { return sunAzimuth_; }
      set {
        sunAzimuth_ = value;
      }
    }

    /// <summary>Field number for the "sunSize" field.</summary>
    public const int SunSizeFieldNumber = 5;
    private float sunSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SunSize {
      get { return sunSize_; }
      set {
        sunSize_ = value;
      }
    }

    /// <summary>Field number for the "fogDensity" field.</summary>
    public const int FogDensityFieldNumber = 6;
    private float fogDensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FogDensity {
      get { return fogDensity_; }
      set {
        fogDensity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AmbienceSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AmbienceSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SkyZenithColor, other.SkyZenithColor)) return false;
      if (!object.Equals(SkyHorizonColor, other.SkyHorizonColor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SunAltitude, other.SunAltitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SunAzimuth, other.SunAzimuth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SunSize, other.SunSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FogDensity, other.FogDensity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (skyZenithColor_ != null) hash ^= SkyZenithColor.GetHashCode();
      if (skyHorizonColor_ != null) hash ^= SkyHorizonColor.GetHashCode();
      if (SunAltitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SunAltitude);
      if (SunAzimuth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SunAzimuth);
      if (SunSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SunSize);
      if (FogDensity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FogDensity);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (skyZenithColor_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SkyZenithColor);
      }
      if (skyHorizonColor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SkyHorizonColor);
      }
      if (SunAltitude != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SunAltitude);
      }
      if (SunAzimuth != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(SunAzimuth);
      }
      if (SunSize != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SunSize);
      }
      if (FogDensity != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(FogDensity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (skyZenithColor_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SkyZenithColor);
      }
      if (skyHorizonColor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SkyHorizonColor);
      }
      if (SunAltitude != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SunAltitude);
      }
      if (SunAzimuth != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(SunAzimuth);
      }
      if (SunSize != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SunSize);
      }
      if (FogDensity != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(FogDensity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (skyZenithColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SkyZenithColor);
      }
      if (skyHorizonColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SkyHorizonColor);
      }
      if (SunAltitude != 0F) {
        size += 1 + 4;
      }
      if (SunAzimuth != 0F) {
        size += 1 + 4;
      }
      if (SunSize != 0F) {
        size += 1 + 4;
      }
      if (FogDensity != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AmbienceSettings other) {
      if (other == null) {
        return;
      }
      if (other.skyZenithColor_ != null) {
        if (skyZenithColor_ == null) {
          SkyZenithColor = new global::COD.Types.Color();
        }
        SkyZenithColor.MergeFrom(other.SkyZenithColor);
      }
      if (other.skyHorizonColor_ != null) {
        if (skyHorizonColor_ == null) {
          SkyHorizonColor = new global::COD.Types.Color();
        }
        SkyHorizonColor.MergeFrom(other.SkyHorizonColor);
      }
      if (other.SunAltitude != 0F) {
        SunAltitude = other.SunAltitude;
      }
      if (other.SunAzimuth != 0F) {
        SunAzimuth = other.SunAzimuth;
      }
      if (other.SunSize != 0F) {
        SunSize = other.SunSize;
      }
      if (other.FogDensity != 0F) {
        FogDensity = other.FogDensity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (skyZenithColor_ == null) {
              SkyZenithColor = new global::COD.Types.Color();
            }
            input.ReadMessage(SkyZenithColor);
            break;
          }
          case 18: {
            if (skyHorizonColor_ == null) {
              SkyHorizonColor = new global::COD.Types.Color();
            }
            input.ReadMessage(SkyHorizonColor);
            break;
          }
          case 29: {
            SunAltitude = input.ReadFloat();
            break;
          }
          case 37: {
            SunAzimuth = input.ReadFloat();
            break;
          }
          case 45: {
            SunSize = input.ReadFloat();
            break;
          }
          case 53: {
            FogDensity = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (skyZenithColor_ == null) {
              SkyZenithColor = new global::COD.Types.Color();
            }
            input.ReadMessage(SkyZenithColor);
            break;
          }
          case 18: {
            if (skyHorizonColor_ == null) {
              SkyHorizonColor = new global::COD.Types.Color();
            }
            input.ReadMessage(SkyHorizonColor);
            break;
          }
          case 29: {
            SunAltitude = input.ReadFloat();
            break;
          }
          case 37: {
            SunAzimuth = input.ReadFloat();
            break;
          }
          case 45: {
            SunSize = input.ReadFloat();
            break;
          }
          case 53: {
            FogDensity = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeGroup : pb::IMessage<LevelNodeGroup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeGroup> _parser = new pb::MessageParser<LevelNodeGroup>(() => new LevelNodeGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeGroup(LevelNodeGroup other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      childNodes_ = other.childNodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeGroup Clone() {
      return new LevelNodeGroup(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private global::COD.Types.Vector scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "childNodes" field.</summary>
    public const int ChildNodesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::COD.Types.LevelNode> _repeated_childNodes_codec
        = pb::FieldCodec.ForMessage(34, global::COD.Types.LevelNode.Parser);
    private readonly pbc::RepeatedField<global::COD.Types.LevelNode> childNodes_ = new pbc::RepeatedField<global::COD.Types.LevelNode>();
    /// <summary>
    ///This is where level nodes that are part of the group are stored when saving to file / loading
    ///It is ok to be empty when networking a groups transform
    ///There is an additional message for networking grouping and ungrouping (LevelNodeGroupRequest, LevelNodeGroupResponse)
    ///When sending the full level on a new player joining the editor, first the level nodes are sent on their own and then a group response to group them
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::COD.Types.LevelNode> ChildNodes {
      get { return childNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if(!childNodes_.Equals(other.childNodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      hash ^= childNodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      childNodes_.WriteTo(output, _repeated_childNodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      childNodes_.WriteTo(ref output, _repeated_childNodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      size += childNodes_.CalculateSize(_repeated_childNodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeGroup other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::COD.Types.Vector();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      childNodes_.Add(other.childNodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 34: {
            childNodes_.AddEntriesFrom(input, _repeated_childNodes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 34: {
            childNodes_.AddEntriesFrom(ref input, _repeated_childNodes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeStart : pb::IMessage<LevelNodeStart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeStart> _parser = new pb::MessageParser<LevelNodeStart>(() => new LevelNodeStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStart(LevelNodeStart other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      radius_ = other.radius_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStart Clone() {
      return new LevelNodeStart(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::COD.Types.Quaternion rotation_;
    /// <summary>
    ///Should always be upright and is meant to be used for the player rotation on spawn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 3;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (Radius != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Radius);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (Radius != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Radius);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeStart other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 29: {
            Radius = input.ReadFloat();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 29: {
            Radius = input.ReadFloat();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeFinish : pb::IMessage<LevelNodeFinish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeFinish> _parser = new pb::MessageParser<LevelNodeFinish>(() => new LevelNodeFinish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeFinish(LevelNodeFinish other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      radius_ = other.radius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeFinish Clone() {
      return new LevelNodeFinish(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (Radius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (Radius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeFinish other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 21: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 21: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeStatic : pb::IMessage<LevelNodeStatic>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeStatic> _parser = new pb::MessageParser<LevelNodeStatic>(() => new LevelNodeStatic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeStatic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStatic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStatic(LevelNodeStatic other) : this() {
      shape_ = other.shape_;
      material_ = other.material_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      color1_ = other.color1_ != null ? other.color1_.Clone() : null;
      color2_ = other.color2_ != null ? other.color2_.Clone() : null;
      isNeon_ = other.isNeon_;
      isTransparent_ = other.isTransparent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStatic Clone() {
      return new LevelNodeStatic(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private global::COD.Types.LevelNodeShape shape_ = global::COD.Types.LevelNodeShape.Start;
    /// <summary>
    ///Must be one of CUBE, SPHERE, CYLINDER, PYRAMID, PRISM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeShape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 2;
    private global::COD.Types.LevelNodeMaterial material_ = global::COD.Types.LevelNodeMaterial.Default;
    /// <summary>
    ///Can not be GRABBABLE_CRUMBLING
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeMaterial Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 4;
    private global::COD.Types.Vector scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "color1" field.</summary>
    public const int Color1FieldNumber = 6;
    private global::COD.Types.Color color1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Color Color1 {
      get { return color1_; }
      set {
        color1_ = value;
      }
    }

    /// <summary>Field number for the "color2" field.</summary>
    public const int Color2FieldNumber = 9;
    private global::COD.Types.Color color2_;
    /// <summary>
    ///Used for colored lava blocks, blending between the two colors, but also used for specularity on colored default blocks!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Color Color2 {
      get { return color2_; }
      set {
        color2_ = value;
      }
    }

    /// <summary>Field number for the "isNeon" field.</summary>
    public const int IsNeonFieldNumber = 7;
    private bool isNeon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNeon {
      get { return isNeon_; }
      set {
        isNeon_ = value;
      }
    }

    /// <summary>Field number for the "isTransparent" field.</summary>
    public const int IsTransparentFieldNumber = 8;
    private bool isTransparent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTransparent {
      get { return isTransparent_; }
      set {
        isTransparent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeStatic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeStatic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Shape != other.Shape) return false;
      if (Material != other.Material) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Color1, other.Color1)) return false;
      if (!object.Equals(Color2, other.Color2)) return false;
      if (IsNeon != other.IsNeon) return false;
      if (IsTransparent != other.IsTransparent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Shape != global::COD.Types.LevelNodeShape.Start) hash ^= Shape.GetHashCode();
      if (Material != global::COD.Types.LevelNodeMaterial.Default) hash ^= Material.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (color1_ != null) hash ^= Color1.GetHashCode();
      if (color2_ != null) hash ^= Color2.GetHashCode();
      if (IsNeon != false) hash ^= IsNeon.GetHashCode();
      if (IsTransparent != false) hash ^= IsTransparent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Material);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
      if (color1_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Color1);
      }
      if (IsNeon != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsNeon);
      }
      if (IsTransparent != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsTransparent);
      }
      if (color2_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Color2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Material);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
      if (color1_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Color1);
      }
      if (IsNeon != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsNeon);
      }
      if (IsTransparent != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsTransparent);
      }
      if (color2_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Color2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Material);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (color1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color1);
      }
      if (color2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color2);
      }
      if (IsNeon != false) {
        size += 1 + 1;
      }
      if (IsTransparent != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeStatic other) {
      if (other == null) {
        return;
      }
      if (other.Shape != global::COD.Types.LevelNodeShape.Start) {
        Shape = other.Shape;
      }
      if (other.Material != global::COD.Types.LevelNodeMaterial.Default) {
        Material = other.Material;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::COD.Types.Vector();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.color1_ != null) {
        if (color1_ == null) {
          Color1 = new global::COD.Types.Color();
        }
        Color1.MergeFrom(other.Color1);
      }
      if (other.color2_ != null) {
        if (color2_ == null) {
          Color2 = new global::COD.Types.Color();
        }
        Color2.MergeFrom(other.Color2);
      }
      if (other.IsNeon != false) {
        IsNeon = other.IsNeon;
      }
      if (other.IsTransparent != false) {
        IsTransparent = other.IsTransparent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Shape = (global::COD.Types.LevelNodeShape) input.ReadEnum();
            break;
          }
          case 16: {
            Material = (global::COD.Types.LevelNodeMaterial) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 42: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 50: {
            if (color1_ == null) {
              Color1 = new global::COD.Types.Color();
            }
            input.ReadMessage(Color1);
            break;
          }
          case 56: {
            IsNeon = input.ReadBool();
            break;
          }
          case 64: {
            IsTransparent = input.ReadBool();
            break;
          }
          case 74: {
            if (color2_ == null) {
              Color2 = new global::COD.Types.Color();
            }
            input.ReadMessage(Color2);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Shape = (global::COD.Types.LevelNodeShape) input.ReadEnum();
            break;
          }
          case 16: {
            Material = (global::COD.Types.LevelNodeMaterial) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 42: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 50: {
            if (color1_ == null) {
              Color1 = new global::COD.Types.Color();
            }
            input.ReadMessage(Color1);
            break;
          }
          case 56: {
            IsNeon = input.ReadBool();
            break;
          }
          case 64: {
            IsTransparent = input.ReadBool();
            break;
          }
          case 74: {
            if (color2_ == null) {
              Color2 = new global::COD.Types.Color();
            }
            input.ReadMessage(Color2);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeCrumbling : pb::IMessage<LevelNodeCrumbling>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeCrumbling> _parser = new pb::MessageParser<LevelNodeCrumbling>(() => new LevelNodeCrumbling());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeCrumbling> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeCrumbling() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeCrumbling(LevelNodeCrumbling other) : this() {
      shape_ = other.shape_;
      material_ = other.material_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      stableTime_ = other.stableTime_;
      respawnTime_ = other.respawnTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeCrumbling Clone() {
      return new LevelNodeCrumbling(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private global::COD.Types.LevelNodeShape shape_ = global::COD.Types.LevelNodeShape.Start;
    /// <summary>
    ///Must be one of CUBE, SPHERE, CYLINDER, PYRAMID, PRISM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeShape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 2;
    private global::COD.Types.LevelNodeMaterial material_ = global::COD.Types.LevelNodeMaterial.Default;
    /// <summary>
    ///Must be GRABBABLE_CRUMBLING
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeMaterial Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 4;
    private global::COD.Types.Vector scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "stableTime" field.</summary>
    public const int StableTimeFieldNumber = 6;
    private float stableTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StableTime {
      get { return stableTime_; }
      set {
        stableTime_ = value;
      }
    }

    /// <summary>Field number for the "respawnTime" field.</summary>
    public const int RespawnTimeFieldNumber = 7;
    private float respawnTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RespawnTime {
      get { return respawnTime_; }
      set {
        respawnTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeCrumbling);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeCrumbling other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Shape != other.Shape) return false;
      if (Material != other.Material) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StableTime, other.StableTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RespawnTime, other.RespawnTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Shape != global::COD.Types.LevelNodeShape.Start) hash ^= Shape.GetHashCode();
      if (Material != global::COD.Types.LevelNodeMaterial.Default) hash ^= Material.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (StableTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StableTime);
      if (RespawnTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RespawnTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Material);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
      if (StableTime != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(StableTime);
      }
      if (RespawnTime != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RespawnTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Material);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
      if (StableTime != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(StableTime);
      }
      if (RespawnTime != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RespawnTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Material);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (StableTime != 0F) {
        size += 1 + 4;
      }
      if (RespawnTime != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeCrumbling other) {
      if (other == null) {
        return;
      }
      if (other.Shape != global::COD.Types.LevelNodeShape.Start) {
        Shape = other.Shape;
      }
      if (other.Material != global::COD.Types.LevelNodeMaterial.Default) {
        Material = other.Material;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::COD.Types.Vector();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.StableTime != 0F) {
        StableTime = other.StableTime;
      }
      if (other.RespawnTime != 0F) {
        RespawnTime = other.RespawnTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Shape = (global::COD.Types.LevelNodeShape) input.ReadEnum();
            break;
          }
          case 16: {
            Material = (global::COD.Types.LevelNodeMaterial) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 42: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 53: {
            StableTime = input.ReadFloat();
            break;
          }
          case 61: {
            RespawnTime = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Shape = (global::COD.Types.LevelNodeShape) input.ReadEnum();
            break;
          }
          case 16: {
            Material = (global::COD.Types.LevelNodeMaterial) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 42: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 53: {
            StableTime = input.ReadFloat();
            break;
          }
          case 61: {
            RespawnTime = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeSign : pb::IMessage<LevelNodeSign>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeSign> _parser = new pb::MessageParser<LevelNodeSign>(() => new LevelNodeSign());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeSign> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeSign() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeSign(LevelNodeSign other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeSign Clone() {
      return new LevelNodeSign(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeSign);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeSign other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeSign other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeGravity : pb::IMessage<LevelNodeGravity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeGravity> _parser = new pb::MessageParser<LevelNodeGravity>(() => new LevelNodeGravity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeGravity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeGravity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeGravity(LevelNodeGravity other) : this() {
      mode_ = other.mode_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeGravity Clone() {
      return new LevelNodeGravity(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::COD.Types.LevelNodeGravity.Types.Mode mode_ = global::COD.Types.LevelNodeGravity.Types.Mode.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeGravity.Types.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 3;
    private global::COD.Types.Vector scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 4;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 5;
    private global::COD.Types.Vector direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeGravity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeGravity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != global::COD.Types.LevelNodeGravity.Types.Mode.Default) hash ^= Mode.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Mode != global::COD.Types.LevelNodeGravity.Types.Mode.Default) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rotation);
      }
      if (direction_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Direction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Mode != global::COD.Types.LevelNodeGravity.Types.Mode.Default) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rotation);
      }
      if (direction_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Direction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != global::COD.Types.LevelNodeGravity.Types.Mode.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeGravity other) {
      if (other == null) {
        return;
      }
      if (other.Mode != global::COD.Types.LevelNodeGravity.Types.Mode.Default) {
        Mode = other.Mode;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::COD.Types.Vector();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          Direction = new global::COD.Types.Vector();
        }
        Direction.MergeFrom(other.Direction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mode = (global::COD.Types.LevelNodeGravity.Types.Mode) input.ReadEnum();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 34: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 42: {
            if (direction_ == null) {
              Direction = new global::COD.Types.Vector();
            }
            input.ReadMessage(Direction);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Mode = (global::COD.Types.LevelNodeGravity.Types.Mode) input.ReadEnum();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 34: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 42: {
            if (direction_ == null) {
              Direction = new global::COD.Types.Vector();
            }
            input.ReadMessage(Direction);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the LevelNodeGravity message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Mode {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        /// <summary>
        ///gtag like movement with the head on the ground, also no leg collisions with lava
        /// </summary>
        [pbr::OriginalName("NOLEGS")] Nolegs = 1,
      }

    }
    #endregion

  }

  public sealed partial class LevelNodeLobbyTerminal : pb::IMessage<LevelNodeLobbyTerminal>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeLobbyTerminal> _parser = new pb::MessageParser<LevelNodeLobbyTerminal>(() => new LevelNodeLobbyTerminal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeLobbyTerminal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeLobbyTerminal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeLobbyTerminal(LevelNodeLobbyTerminal other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeLobbyTerminal Clone() {
      return new LevelNodeLobbyTerminal(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 4;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeLobbyTerminal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeLobbyTerminal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeLobbyTerminal other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeParticleEmitter : pb::IMessage<LevelNodeParticleEmitter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeParticleEmitter> _parser = new pb::MessageParser<LevelNodeParticleEmitter>(() => new LevelNodeParticleEmitter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeParticleEmitter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeParticleEmitter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeParticleEmitter(LevelNodeParticleEmitter other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      particlesPerSecond_ = other.particlesPerSecond_;
      lifeSpan_ = other.lifeSpan_ != null ? other.lifeSpan_.Clone() : null;
      startColor_ = other.startColor_ != null ? other.startColor_.Clone() : null;
      endColor_ = other.endColor_ != null ? other.endColor_.Clone() : null;
      startSize_ = other.startSize_ != null ? other.startSize_.Clone() : null;
      endSize_ = other.endSize_ != null ? other.endSize_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      velocityMin_ = other.velocityMin_ != null ? other.velocityMin_.Clone() : null;
      velocityMax_ = other.velocityMax_ != null ? other.velocityMax_.Clone() : null;
      accelerationMin_ = other.accelerationMin_ != null ? other.accelerationMin_.Clone() : null;
      accelerationMax_ = other.accelerationMax_ != null ? other.accelerationMax_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeParticleEmitter Clone() {
      return new LevelNodeParticleEmitter(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private global::COD.Types.Vector scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "particlesPerSecond" field.</summary>
    public const int ParticlesPerSecondFieldNumber = 5;
    private uint particlesPerSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ParticlesPerSecond {
      get { return particlesPerSecond_; }
      set {
        particlesPerSecond_ = value;
      }
    }

    /// <summary>Field number for the "lifeSpan" field.</summary>
    public const int LifeSpanFieldNumber = 6;
    private global::COD.Types.Vector2 lifeSpan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector2 LifeSpan {
      get { return lifeSpan_; }
      set {
        lifeSpan_ = value;
      }
    }

    /// <summary>Field number for the "startColor" field.</summary>
    public const int StartColorFieldNumber = 7;
    private global::COD.Types.Color startColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Color StartColor {
      get { return startColor_; }
      set {
        startColor_ = value;
      }
    }

    /// <summary>Field number for the "endColor" field.</summary>
    public const int EndColorFieldNumber = 8;
    private global::COD.Types.Color endColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Color EndColor {
      get { return endColor_; }
      set {
        endColor_ = value;
      }
    }

    /// <summary>Field number for the "startSize" field.</summary>
    public const int StartSizeFieldNumber = 9;
    private global::COD.Types.Vector2 startSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector2 StartSize {
      get { return startSize_; }
      set {
        startSize_ = value;
      }
    }

    /// <summary>Field number for the "endSize" field.</summary>
    public const int EndSizeFieldNumber = 10;
    private global::COD.Types.Vector2 endSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector2 EndSize {
      get { return endSize_; }
      set {
        endSize_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 14;
    private global::COD.Types.Vector velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "velocityMin" field.</summary>
    public const int VelocityMinFieldNumber = 15;
    private global::COD.Types.Vector velocityMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector VelocityMin {
      get { return velocityMin_; }
      set {
        velocityMin_ = value;
      }
    }

    /// <summary>Field number for the "velocityMax" field.</summary>
    public const int VelocityMaxFieldNumber = 16;
    private global::COD.Types.Vector velocityMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector VelocityMax {
      get { return velocityMax_; }
      set {
        velocityMax_ = value;
      }
    }

    /// <summary>Field number for the "accelerationMin" field.</summary>
    public const int AccelerationMinFieldNumber = 17;
    private global::COD.Types.Vector accelerationMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector AccelerationMin {
      get { return accelerationMin_; }
      set {
        accelerationMin_ = value;
      }
    }

    /// <summary>Field number for the "accelerationMax" field.</summary>
    public const int AccelerationMaxFieldNumber = 18;
    private global::COD.Types.Vector accelerationMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector AccelerationMax {
      get { return accelerationMax_; }
      set {
        accelerationMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeParticleEmitter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeParticleEmitter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (ParticlesPerSecond != other.ParticlesPerSecond) return false;
      if (!object.Equals(LifeSpan, other.LifeSpan)) return false;
      if (!object.Equals(StartColor, other.StartColor)) return false;
      if (!object.Equals(EndColor, other.EndColor)) return false;
      if (!object.Equals(StartSize, other.StartSize)) return false;
      if (!object.Equals(EndSize, other.EndSize)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (!object.Equals(VelocityMin, other.VelocityMin)) return false;
      if (!object.Equals(VelocityMax, other.VelocityMax)) return false;
      if (!object.Equals(AccelerationMin, other.AccelerationMin)) return false;
      if (!object.Equals(AccelerationMax, other.AccelerationMax)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (ParticlesPerSecond != 0) hash ^= ParticlesPerSecond.GetHashCode();
      if (lifeSpan_ != null) hash ^= LifeSpan.GetHashCode();
      if (startColor_ != null) hash ^= StartColor.GetHashCode();
      if (endColor_ != null) hash ^= EndColor.GetHashCode();
      if (startSize_ != null) hash ^= StartSize.GetHashCode();
      if (endSize_ != null) hash ^= EndSize.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (velocityMin_ != null) hash ^= VelocityMin.GetHashCode();
      if (velocityMax_ != null) hash ^= VelocityMax.GetHashCode();
      if (accelerationMin_ != null) hash ^= AccelerationMin.GetHashCode();
      if (accelerationMax_ != null) hash ^= AccelerationMax.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (ParticlesPerSecond != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ParticlesPerSecond);
      }
      if (lifeSpan_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LifeSpan);
      }
      if (startColor_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(StartColor);
      }
      if (endColor_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(EndColor);
      }
      if (startSize_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(StartSize);
      }
      if (endSize_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(EndSize);
      }
      if (velocity_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Velocity);
      }
      if (velocityMin_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(VelocityMin);
      }
      if (velocityMax_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(VelocityMax);
      }
      if (accelerationMin_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(AccelerationMin);
      }
      if (accelerationMax_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(AccelerationMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (ParticlesPerSecond != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ParticlesPerSecond);
      }
      if (lifeSpan_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LifeSpan);
      }
      if (startColor_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(StartColor);
      }
      if (endColor_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(EndColor);
      }
      if (startSize_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(StartSize);
      }
      if (endSize_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(EndSize);
      }
      if (velocity_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Velocity);
      }
      if (velocityMin_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(VelocityMin);
      }
      if (velocityMax_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(VelocityMax);
      }
      if (accelerationMin_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(AccelerationMin);
      }
      if (accelerationMax_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(AccelerationMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (ParticlesPerSecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ParticlesPerSecond);
      }
      if (lifeSpan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LifeSpan);
      }
      if (startColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartColor);
      }
      if (endColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndColor);
      }
      if (startSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartSize);
      }
      if (endSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndSize);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (velocityMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VelocityMin);
      }
      if (velocityMax_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VelocityMax);
      }
      if (accelerationMin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccelerationMin);
      }
      if (accelerationMax_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccelerationMax);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeParticleEmitter other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::COD.Types.Vector();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.ParticlesPerSecond != 0) {
        ParticlesPerSecond = other.ParticlesPerSecond;
      }
      if (other.lifeSpan_ != null) {
        if (lifeSpan_ == null) {
          LifeSpan = new global::COD.Types.Vector2();
        }
        LifeSpan.MergeFrom(other.LifeSpan);
      }
      if (other.startColor_ != null) {
        if (startColor_ == null) {
          StartColor = new global::COD.Types.Color();
        }
        StartColor.MergeFrom(other.StartColor);
      }
      if (other.endColor_ != null) {
        if (endColor_ == null) {
          EndColor = new global::COD.Types.Color();
        }
        EndColor.MergeFrom(other.EndColor);
      }
      if (other.startSize_ != null) {
        if (startSize_ == null) {
          StartSize = new global::COD.Types.Vector2();
        }
        StartSize.MergeFrom(other.StartSize);
      }
      if (other.endSize_ != null) {
        if (endSize_ == null) {
          EndSize = new global::COD.Types.Vector2();
        }
        EndSize.MergeFrom(other.EndSize);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          Velocity = new global::COD.Types.Vector();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.velocityMin_ != null) {
        if (velocityMin_ == null) {
          VelocityMin = new global::COD.Types.Vector();
        }
        VelocityMin.MergeFrom(other.VelocityMin);
      }
      if (other.velocityMax_ != null) {
        if (velocityMax_ == null) {
          VelocityMax = new global::COD.Types.Vector();
        }
        VelocityMax.MergeFrom(other.VelocityMax);
      }
      if (other.accelerationMin_ != null) {
        if (accelerationMin_ == null) {
          AccelerationMin = new global::COD.Types.Vector();
        }
        AccelerationMin.MergeFrom(other.AccelerationMin);
      }
      if (other.accelerationMax_ != null) {
        if (accelerationMax_ == null) {
          AccelerationMax = new global::COD.Types.Vector();
        }
        AccelerationMax.MergeFrom(other.AccelerationMax);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 40: {
            ParticlesPerSecond = input.ReadUInt32();
            break;
          }
          case 50: {
            if (lifeSpan_ == null) {
              LifeSpan = new global::COD.Types.Vector2();
            }
            input.ReadMessage(LifeSpan);
            break;
          }
          case 58: {
            if (startColor_ == null) {
              StartColor = new global::COD.Types.Color();
            }
            input.ReadMessage(StartColor);
            break;
          }
          case 66: {
            if (endColor_ == null) {
              EndColor = new global::COD.Types.Color();
            }
            input.ReadMessage(EndColor);
            break;
          }
          case 74: {
            if (startSize_ == null) {
              StartSize = new global::COD.Types.Vector2();
            }
            input.ReadMessage(StartSize);
            break;
          }
          case 82: {
            if (endSize_ == null) {
              EndSize = new global::COD.Types.Vector2();
            }
            input.ReadMessage(EndSize);
            break;
          }
          case 114: {
            if (velocity_ == null) {
              Velocity = new global::COD.Types.Vector();
            }
            input.ReadMessage(Velocity);
            break;
          }
          case 122: {
            if (velocityMin_ == null) {
              VelocityMin = new global::COD.Types.Vector();
            }
            input.ReadMessage(VelocityMin);
            break;
          }
          case 130: {
            if (velocityMax_ == null) {
              VelocityMax = new global::COD.Types.Vector();
            }
            input.ReadMessage(VelocityMax);
            break;
          }
          case 138: {
            if (accelerationMin_ == null) {
              AccelerationMin = new global::COD.Types.Vector();
            }
            input.ReadMessage(AccelerationMin);
            break;
          }
          case 146: {
            if (accelerationMax_ == null) {
              AccelerationMax = new global::COD.Types.Vector();
            }
            input.ReadMessage(AccelerationMax);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 40: {
            ParticlesPerSecond = input.ReadUInt32();
            break;
          }
          case 50: {
            if (lifeSpan_ == null) {
              LifeSpan = new global::COD.Types.Vector2();
            }
            input.ReadMessage(LifeSpan);
            break;
          }
          case 58: {
            if (startColor_ == null) {
              StartColor = new global::COD.Types.Color();
            }
            input.ReadMessage(StartColor);
            break;
          }
          case 66: {
            if (endColor_ == null) {
              EndColor = new global::COD.Types.Color();
            }
            input.ReadMessage(EndColor);
            break;
          }
          case 74: {
            if (startSize_ == null) {
              StartSize = new global::COD.Types.Vector2();
            }
            input.ReadMessage(StartSize);
            break;
          }
          case 82: {
            if (endSize_ == null) {
              EndSize = new global::COD.Types.Vector2();
            }
            input.ReadMessage(EndSize);
            break;
          }
          case 114: {
            if (velocity_ == null) {
              Velocity = new global::COD.Types.Vector();
            }
            input.ReadMessage(Velocity);
            break;
          }
          case 122: {
            if (velocityMin_ == null) {
              VelocityMin = new global::COD.Types.Vector();
            }
            input.ReadMessage(VelocityMin);
            break;
          }
          case 130: {
            if (velocityMax_ == null) {
              VelocityMax = new global::COD.Types.Vector();
            }
            input.ReadMessage(VelocityMax);
            break;
          }
          case 138: {
            if (accelerationMin_ == null) {
              AccelerationMin = new global::COD.Types.Vector();
            }
            input.ReadMessage(AccelerationMin);
            break;
          }
          case 146: {
            if (accelerationMax_ == null) {
              AccelerationMax = new global::COD.Types.Vector();
            }
            input.ReadMessage(AccelerationMax);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TriggerSourceBasic : pb::IMessage<TriggerSourceBasic>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TriggerSourceBasic> _parser = new pb::MessageParser<TriggerSourceBasic>(() => new TriggerSourceBasic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerSourceBasic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerSourceBasic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerSourceBasic(TriggerSourceBasic other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerSourceBasic Clone() {
      return new TriggerSourceBasic(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::COD.Types.TriggerSourceBasic.Types.Type type_ = global::COD.Types.TriggerSourceBasic.Types.Type.Hand;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.TriggerSourceBasic.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerSourceBasic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerSourceBasic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::COD.Types.TriggerSourceBasic.Types.Type.Hand) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::COD.Types.TriggerSourceBasic.Types.Type.Hand) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::COD.Types.TriggerSourceBasic.Types.Type.Hand) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::COD.Types.TriggerSourceBasic.Types.Type.Hand) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerSourceBasic other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::COD.Types.TriggerSourceBasic.Types.Type.Hand) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::COD.Types.TriggerSourceBasic.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::COD.Types.TriggerSourceBasic.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TriggerSourceBasic message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("HAND")] Hand = 0,
        [pbr::OriginalName("HEAD")] Head = 1,
        [pbr::OriginalName("GRAPPLE")] Grapple = 2,
        [pbr::OriginalName("FEET")] Feet = 3,
        [pbr::OriginalName("BLOCK")] Block = 4,
      }

    }
    #endregion

  }

  public sealed partial class TriggerSource : pb::IMessage<TriggerSource>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TriggerSource> _parser = new pb::MessageParser<TriggerSource>(() => new TriggerSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerSource(TriggerSource other) : this() {
      switch (other.ContentCase) {
        case ContentOneofCase.TriggerSourceBasic:
          TriggerSourceBasic = other.TriggerSourceBasic.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerSource Clone() {
      return new TriggerSource(this);
    }

    /// <summary>Field number for the "triggerSourceBasic" field.</summary>
    public const int TriggerSourceBasicFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.TriggerSourceBasic TriggerSourceBasic {
      get { return contentCase_ == ContentOneofCase.TriggerSourceBasic ? (global::COD.Types.TriggerSourceBasic) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.TriggerSourceBasic;
      }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      TriggerSourceBasic = 1,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TriggerSourceBasic, other.TriggerSourceBasic)) return false;
      if (ContentCase != other.ContentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contentCase_ == ContentOneofCase.TriggerSourceBasic) hash ^= TriggerSourceBasic.GetHashCode();
      hash ^= (int) contentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (contentCase_ == ContentOneofCase.TriggerSourceBasic) {
        output.WriteRawTag(10);
        output.WriteMessage(TriggerSourceBasic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (contentCase_ == ContentOneofCase.TriggerSourceBasic) {
        output.WriteRawTag(10);
        output.WriteMessage(TriggerSourceBasic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contentCase_ == ContentOneofCase.TriggerSourceBasic) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TriggerSourceBasic);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerSource other) {
      if (other == null) {
        return;
      }
      switch (other.ContentCase) {
        case ContentOneofCase.TriggerSourceBasic:
          if (TriggerSourceBasic == null) {
            TriggerSourceBasic = new global::COD.Types.TriggerSourceBasic();
          }
          TriggerSourceBasic.MergeFrom(other.TriggerSourceBasic);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::COD.Types.TriggerSourceBasic subBuilder = new global::COD.Types.TriggerSourceBasic();
            if (contentCase_ == ContentOneofCase.TriggerSourceBasic) {
              subBuilder.MergeFrom(TriggerSourceBasic);
            }
            input.ReadMessage(subBuilder);
            TriggerSourceBasic = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::COD.Types.TriggerSourceBasic subBuilder = new global::COD.Types.TriggerSourceBasic();
            if (contentCase_ == ContentOneofCase.TriggerSourceBasic) {
              subBuilder.MergeFrom(TriggerSourceBasic);
            }
            input.ReadMessage(subBuilder);
            TriggerSourceBasic = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TriggerTargetAnimation : pb::IMessage<TriggerTargetAnimation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TriggerTargetAnimation> _parser = new pb::MessageParser<TriggerTargetAnimation>(() => new TriggerTargetAnimation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerTargetAnimation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerTargetAnimation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerTargetAnimation(TriggerTargetAnimation other) : this() {
      objectID_ = other.objectID_;
      animationName_ = other.animationName_;
      loop_ = other.loop_;
      reverse_ = other.reverse_;
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerTargetAnimation Clone() {
      return new TriggerTargetAnimation(this);
    }

    /// <summary>Field number for the "objectID" field.</summary>
    public const int ObjectIDFieldNumber = 1;
    private ulong objectID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjectID {
      get { return objectID_; }
      set {
        objectID_ = value;
      }
    }

    /// <summary>Field number for the "animationName" field.</summary>
    public const int AnimationNameFieldNumber = 2;
    private string animationName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnimationName {
      get { return animationName_; }
      set {
        animationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loop" field.</summary>
    public const int LoopFieldNumber = 3;
    private bool loop_;
    /// <summary>
    ///Make the animation repeat endlessly until it is stopped
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Loop {
      get { return loop_; }
      set {
        loop_ = value;
      }
    }

    /// <summary>Field number for the "reverse" field.</summary>
    public const int ReverseFieldNumber = 4;
    private bool reverse_;
    /// <summary>
    ///Make the animation play backwards
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reverse {
      get { return reverse_; }
      set {
        reverse_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 10;
    private global::COD.Types.TriggerTargetAnimation.Types.Mode mode_ = global::COD.Types.TriggerTargetAnimation.Types.Mode.Stop;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.TriggerTargetAnimation.Types.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerTargetAnimation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerTargetAnimation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectID != other.ObjectID) return false;
      if (AnimationName != other.AnimationName) return false;
      if (Loop != other.Loop) return false;
      if (Reverse != other.Reverse) return false;
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjectID != 0UL) hash ^= ObjectID.GetHashCode();
      if (AnimationName.Length != 0) hash ^= AnimationName.GetHashCode();
      if (Loop != false) hash ^= Loop.GetHashCode();
      if (Reverse != false) hash ^= Reverse.GetHashCode();
      if (Mode != global::COD.Types.TriggerTargetAnimation.Types.Mode.Stop) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ObjectID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ObjectID);
      }
      if (AnimationName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AnimationName);
      }
      if (Loop != false) {
        output.WriteRawTag(24);
        output.WriteBool(Loop);
      }
      if (Reverse != false) {
        output.WriteRawTag(32);
        output.WriteBool(Reverse);
      }
      if (Mode != global::COD.Types.TriggerTargetAnimation.Types.Mode.Stop) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ObjectID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ObjectID);
      }
      if (AnimationName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AnimationName);
      }
      if (Loop != false) {
        output.WriteRawTag(24);
        output.WriteBool(Loop);
      }
      if (Reverse != false) {
        output.WriteRawTag(32);
        output.WriteBool(Reverse);
      }
      if (Mode != global::COD.Types.TriggerTargetAnimation.Types.Mode.Stop) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjectID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjectID);
      }
      if (AnimationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnimationName);
      }
      if (Loop != false) {
        size += 1 + 1;
      }
      if (Reverse != false) {
        size += 1 + 1;
      }
      if (Mode != global::COD.Types.TriggerTargetAnimation.Types.Mode.Stop) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerTargetAnimation other) {
      if (other == null) {
        return;
      }
      if (other.ObjectID != 0UL) {
        ObjectID = other.ObjectID;
      }
      if (other.AnimationName.Length != 0) {
        AnimationName = other.AnimationName;
      }
      if (other.Loop != false) {
        Loop = other.Loop;
      }
      if (other.Reverse != false) {
        Reverse = other.Reverse;
      }
      if (other.Mode != global::COD.Types.TriggerTargetAnimation.Types.Mode.Stop) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ObjectID = input.ReadUInt64();
            break;
          }
          case 18: {
            AnimationName = input.ReadString();
            break;
          }
          case 24: {
            Loop = input.ReadBool();
            break;
          }
          case 32: {
            Reverse = input.ReadBool();
            break;
          }
          case 80: {
            Mode = (global::COD.Types.TriggerTargetAnimation.Types.Mode) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ObjectID = input.ReadUInt64();
            break;
          }
          case 18: {
            AnimationName = input.ReadString();
            break;
          }
          case 24: {
            Loop = input.ReadBool();
            break;
          }
          case 32: {
            Reverse = input.ReadBool();
            break;
          }
          case 80: {
            Mode = (global::COD.Types.TriggerTargetAnimation.Types.Mode) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TriggerTargetAnimation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Mode {
        [pbr::OriginalName("STOP")] Stop = 0,
        [pbr::OriginalName("START")] Start = 1,
        /// <summary>
        ///Toggles between start and stop
        /// </summary>
        [pbr::OriginalName("TOGGLE")] Toggle = 2,
        /// <summary>
        ///Toggles between playing the animation forwards and backwards
        /// </summary>
        [pbr::OriginalName("TOGGLE_REVERSE")] ToggleReverse = 3,
        /// <summary>
        ///Like start, but will always play from the beginning (or end if reverse is on)
        /// </summary>
        [pbr::OriginalName("RESTART")] Restart = 4,
        /// <summary>
        ///Reset to the initial state, playing looped default animation if there is one
        /// </summary>
        [pbr::OriginalName("RESET")] Reset = 5,
      }

    }
    #endregion

  }

  public sealed partial class TriggerTargetSubLevel : pb::IMessage<TriggerTargetSubLevel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TriggerTargetSubLevel> _parser = new pb::MessageParser<TriggerTargetSubLevel>(() => new TriggerTargetSubLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerTargetSubLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerTargetSubLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerTargetSubLevel(TriggerTargetSubLevel other) : this() {
      levelIdentifier_ = other.levelIdentifier_;
      spawnPoint_ = other.spawnPoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerTargetSubLevel Clone() {
      return new TriggerTargetSubLevel(this);
    }

    /// <summary>Field number for the "levelIdentifier" field.</summary>
    public const int LevelIdentifierFieldNumber = 1;
    private string levelIdentifier_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LevelIdentifier {
      get { return levelIdentifier_; }
      set {
        levelIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spawnPoint" field.</summary>
    public const int SpawnPointFieldNumber = 2;
    private string spawnPoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpawnPoint {
      get { return spawnPoint_; }
      set {
        spawnPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerTargetSubLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerTargetSubLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LevelIdentifier != other.LevelIdentifier) return false;
      if (SpawnPoint != other.SpawnPoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LevelIdentifier.Length != 0) hash ^= LevelIdentifier.GetHashCode();
      if (SpawnPoint.Length != 0) hash ^= SpawnPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LevelIdentifier.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LevelIdentifier);
      }
      if (SpawnPoint.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SpawnPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LevelIdentifier.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LevelIdentifier);
      }
      if (SpawnPoint.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SpawnPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelIdentifier);
      }
      if (SpawnPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpawnPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerTargetSubLevel other) {
      if (other == null) {
        return;
      }
      if (other.LevelIdentifier.Length != 0) {
        LevelIdentifier = other.LevelIdentifier;
      }
      if (other.SpawnPoint.Length != 0) {
        SpawnPoint = other.SpawnPoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LevelIdentifier = input.ReadString();
            break;
          }
          case 18: {
            SpawnPoint = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LevelIdentifier = input.ReadString();
            break;
          }
          case 18: {
            SpawnPoint = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TriggerTarget : pb::IMessage<TriggerTarget>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TriggerTarget> _parser = new pb::MessageParser<TriggerTarget>(() => new TriggerTarget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerTarget(TriggerTarget other) : this() {
      switch (other.ContentCase) {
        case ContentOneofCase.TriggerTargetAnimation:
          TriggerTargetAnimation = other.TriggerTargetAnimation.Clone();
          break;
        case ContentOneofCase.TriggerTargetSubLevel:
          TriggerTargetSubLevel = other.TriggerTargetSubLevel.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerTarget Clone() {
      return new TriggerTarget(this);
    }

    /// <summary>Field number for the "triggerTargetAnimation" field.</summary>
    public const int TriggerTargetAnimationFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.TriggerTargetAnimation TriggerTargetAnimation {
      get { return contentCase_ == ContentOneofCase.TriggerTargetAnimation ? (global::COD.Types.TriggerTargetAnimation) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.TriggerTargetAnimation;
      }
    }

    /// <summary>Field number for the "triggerTargetSubLevel" field.</summary>
    public const int TriggerTargetSubLevelFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.TriggerTargetSubLevel TriggerTargetSubLevel {
      get { return contentCase_ == ContentOneofCase.TriggerTargetSubLevel ? (global::COD.Types.TriggerTargetSubLevel) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.TriggerTargetSubLevel;
      }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      TriggerTargetAnimation = 1,
      TriggerTargetSubLevel = 2,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TriggerTargetAnimation, other.TriggerTargetAnimation)) return false;
      if (!object.Equals(TriggerTargetSubLevel, other.TriggerTargetSubLevel)) return false;
      if (ContentCase != other.ContentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contentCase_ == ContentOneofCase.TriggerTargetAnimation) hash ^= TriggerTargetAnimation.GetHashCode();
      if (contentCase_ == ContentOneofCase.TriggerTargetSubLevel) hash ^= TriggerTargetSubLevel.GetHashCode();
      hash ^= (int) contentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (contentCase_ == ContentOneofCase.TriggerTargetAnimation) {
        output.WriteRawTag(10);
        output.WriteMessage(TriggerTargetAnimation);
      }
      if (contentCase_ == ContentOneofCase.TriggerTargetSubLevel) {
        output.WriteRawTag(18);
        output.WriteMessage(TriggerTargetSubLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (contentCase_ == ContentOneofCase.TriggerTargetAnimation) {
        output.WriteRawTag(10);
        output.WriteMessage(TriggerTargetAnimation);
      }
      if (contentCase_ == ContentOneofCase.TriggerTargetSubLevel) {
        output.WriteRawTag(18);
        output.WriteMessage(TriggerTargetSubLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contentCase_ == ContentOneofCase.TriggerTargetAnimation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TriggerTargetAnimation);
      }
      if (contentCase_ == ContentOneofCase.TriggerTargetSubLevel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TriggerTargetSubLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerTarget other) {
      if (other == null) {
        return;
      }
      switch (other.ContentCase) {
        case ContentOneofCase.TriggerTargetAnimation:
          if (TriggerTargetAnimation == null) {
            TriggerTargetAnimation = new global::COD.Types.TriggerTargetAnimation();
          }
          TriggerTargetAnimation.MergeFrom(other.TriggerTargetAnimation);
          break;
        case ContentOneofCase.TriggerTargetSubLevel:
          if (TriggerTargetSubLevel == null) {
            TriggerTargetSubLevel = new global::COD.Types.TriggerTargetSubLevel();
          }
          TriggerTargetSubLevel.MergeFrom(other.TriggerTargetSubLevel);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::COD.Types.TriggerTargetAnimation subBuilder = new global::COD.Types.TriggerTargetAnimation();
            if (contentCase_ == ContentOneofCase.TriggerTargetAnimation) {
              subBuilder.MergeFrom(TriggerTargetAnimation);
            }
            input.ReadMessage(subBuilder);
            TriggerTargetAnimation = subBuilder;
            break;
          }
          case 18: {
            global::COD.Types.TriggerTargetSubLevel subBuilder = new global::COD.Types.TriggerTargetSubLevel();
            if (contentCase_ == ContentOneofCase.TriggerTargetSubLevel) {
              subBuilder.MergeFrom(TriggerTargetSubLevel);
            }
            input.ReadMessage(subBuilder);
            TriggerTargetSubLevel = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::COD.Types.TriggerTargetAnimation subBuilder = new global::COD.Types.TriggerTargetAnimation();
            if (contentCase_ == ContentOneofCase.TriggerTargetAnimation) {
              subBuilder.MergeFrom(TriggerTargetAnimation);
            }
            input.ReadMessage(subBuilder);
            TriggerTargetAnimation = subBuilder;
            break;
          }
          case 18: {
            global::COD.Types.TriggerTargetSubLevel subBuilder = new global::COD.Types.TriggerTargetSubLevel();
            if (contentCase_ == ContentOneofCase.TriggerTargetSubLevel) {
              subBuilder.MergeFrom(TriggerTargetSubLevel);
            }
            input.ReadMessage(subBuilder);
            TriggerTargetSubLevel = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeTrigger : pb::IMessage<LevelNodeTrigger>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeTrigger> _parser = new pb::MessageParser<LevelNodeTrigger>(() => new LevelNodeTrigger());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeTrigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeTrigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeTrigger(LevelNodeTrigger other) : this() {
      shape_ = other.shape_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      isShared_ = other.isShared_;
      triggerSources_ = other.triggerSources_.Clone();
      triggerTargets_ = other.triggerTargets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeTrigger Clone() {
      return new LevelNodeTrigger(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private global::COD.Types.LevelNodeShape shape_ = global::COD.Types.LevelNodeShape.Start;
    /// <summary>
    ///Must be one of CUBE, SPHERE, CYLINDER, PYRAMID, PRISM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeShape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 3;
    private global::COD.Types.Vector scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 4;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "isShared" field.</summary>
    public const int IsSharedFieldNumber = 5;
    private bool isShared_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShared {
      get { return isShared_; }
      set {
        isShared_ = value;
      }
    }

    /// <summary>Field number for the "triggerSources" field.</summary>
    public const int TriggerSourcesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::COD.Types.TriggerSource> _repeated_triggerSources_codec
        = pb::FieldCodec.ForMessage(50, global::COD.Types.TriggerSource.Parser);
    private readonly pbc::RepeatedField<global::COD.Types.TriggerSource> triggerSources_ = new pbc::RepeatedField<global::COD.Types.TriggerSource>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::COD.Types.TriggerSource> TriggerSources {
      get { return triggerSources_; }
    }

    /// <summary>Field number for the "triggerTargets" field.</summary>
    public const int TriggerTargetsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::COD.Types.TriggerTarget> _repeated_triggerTargets_codec
        = pb::FieldCodec.ForMessage(58, global::COD.Types.TriggerTarget.Parser);
    private readonly pbc::RepeatedField<global::COD.Types.TriggerTarget> triggerTargets_ = new pbc::RepeatedField<global::COD.Types.TriggerTarget>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::COD.Types.TriggerTarget> TriggerTargets {
      get { return triggerTargets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeTrigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeTrigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Shape != other.Shape) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (IsShared != other.IsShared) return false;
      if(!triggerSources_.Equals(other.triggerSources_)) return false;
      if(!triggerTargets_.Equals(other.triggerTargets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Shape != global::COD.Types.LevelNodeShape.Start) hash ^= Shape.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (IsShared != false) hash ^= IsShared.GetHashCode();
      hash ^= triggerSources_.GetHashCode();
      hash ^= triggerTargets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Shape);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rotation);
      }
      if (IsShared != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsShared);
      }
      triggerSources_.WriteTo(output, _repeated_triggerSources_codec);
      triggerTargets_.WriteTo(output, _repeated_triggerTargets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Shape);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rotation);
      }
      if (IsShared != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsShared);
      }
      triggerSources_.WriteTo(ref output, _repeated_triggerSources_codec);
      triggerTargets_.WriteTo(ref output, _repeated_triggerTargets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Shape);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (IsShared != false) {
        size += 1 + 1;
      }
      size += triggerSources_.CalculateSize(_repeated_triggerSources_codec);
      size += triggerTargets_.CalculateSize(_repeated_triggerTargets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeTrigger other) {
      if (other == null) {
        return;
      }
      if (other.Shape != global::COD.Types.LevelNodeShape.Start) {
        Shape = other.Shape;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::COD.Types.Vector();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.IsShared != false) {
        IsShared = other.IsShared;
      }
      triggerSources_.Add(other.triggerSources_);
      triggerTargets_.Add(other.triggerTargets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Shape = (global::COD.Types.LevelNodeShape) input.ReadEnum();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 34: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 40: {
            IsShared = input.ReadBool();
            break;
          }
          case 50: {
            triggerSources_.AddEntriesFrom(input, _repeated_triggerSources_codec);
            break;
          }
          case 58: {
            triggerTargets_.AddEntriesFrom(input, _repeated_triggerTargets_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Shape = (global::COD.Types.LevelNodeShape) input.ReadEnum();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 34: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 40: {
            IsShared = input.ReadBool();
            break;
          }
          case 50: {
            triggerSources_.AddEntriesFrom(ref input, _repeated_triggerSources_codec);
            break;
          }
          case 58: {
            triggerTargets_.AddEntriesFrom(ref input, _repeated_triggerTargets_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AnimationFrame : pb::IMessage<AnimationFrame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AnimationFrame> _parser = new pb::MessageParser<AnimationFrame>(() => new AnimationFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimationFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationFrame(AnimationFrame other) : this() {
      time_ = other.time_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationFrame Clone() {
      return new AnimationFrame(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimationFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimationFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Time != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Time);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Time != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Time);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimationFrame other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Time = input.ReadFloat();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Time = input.ReadFloat();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Animation : pb::IMessage<Animation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Animation> _parser = new pb::MessageParser<Animation>(() => new Animation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Animation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation(Animation other) : this() {
      name_ = other.name_;
      frames_ = other.frames_.Clone();
      direction_ = other.direction_;
      speed_ = other.speed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation Clone() {
      return new Animation(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::COD.Types.AnimationFrame> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(18, global::COD.Types.AnimationFrame.Parser);
    private readonly pbc::RepeatedField<global::COD.Types.AnimationFrame> frames_ = new pbc::RepeatedField<global::COD.Types.AnimationFrame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::COD.Types.AnimationFrame> Frames {
      get { return frames_; }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 3;
    private global::COD.Types.Animation.Types.Direction direction_ = global::COD.Types.Animation.Types.Direction.Restart;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Animation.Types.Direction Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Animation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Animation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!frames_.Equals(other.frames_)) return false;
      if (Direction != other.Direction) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= frames_.GetHashCode();
      if (Direction != global::COD.Types.Animation.Types.Direction.Restart) hash ^= Direction.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      frames_.WriteTo(output, _repeated_frames_codec);
      if (Direction != global::COD.Types.Animation.Types.Direction.Restart) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Direction);
      }
      if (Speed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Speed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      frames_.WriteTo(ref output, _repeated_frames_codec);
      if (Direction != global::COD.Types.Animation.Types.Direction.Restart) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Direction);
      }
      if (Speed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Speed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += frames_.CalculateSize(_repeated_frames_codec);
      if (Direction != global::COD.Types.Animation.Types.Direction.Restart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Animation other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      frames_.Add(other.frames_);
      if (other.Direction != global::COD.Types.Animation.Types.Direction.Restart) {
        Direction = other.Direction;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
          case 24: {
            Direction = (global::COD.Types.Animation.Types.Direction) input.ReadEnum();
            break;
          }
          case 37: {
            Speed = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            frames_.AddEntriesFrom(ref input, _repeated_frames_codec);
            break;
          }
          case 24: {
            Direction = (global::COD.Types.Animation.Types.Direction) input.ReadEnum();
            break;
          }
          case 37: {
            Speed = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Animation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Direction {
        /// <summary>
        ///After the last frame, jump back to the first frame
        /// </summary>
        [pbr::OriginalName("RESTART")] Restart = 0,
        /// <summary>
        ///After the last frame, play the animation backwards
        /// </summary>
        [pbr::OriginalName("PINGPONG")] Pingpong = 1,
      }

    }
    #endregion

  }

  public sealed partial class LevelNode : pb::IMessage<LevelNode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNode> _parser = new pb::MessageParser<LevelNode>(() => new LevelNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNode(LevelNode other) : this() {
      isLocked_ = other.isLocked_;
      animations_ = other.animations_.Clone();
      activeAnimation_ = other.activeAnimation_;
      switch (other.ContentCase) {
        case ContentOneofCase.LevelNodeStart:
          LevelNodeStart = other.LevelNodeStart.Clone();
          break;
        case ContentOneofCase.LevelNodeFinish:
          LevelNodeFinish = other.LevelNodeFinish.Clone();
          break;
        case ContentOneofCase.LevelNodeStatic:
          LevelNodeStatic = other.LevelNodeStatic.Clone();
          break;
        case ContentOneofCase.LevelNodeSign:
          LevelNodeSign = other.LevelNodeSign.Clone();
          break;
        case ContentOneofCase.LevelNodeCrumbling:
          LevelNodeCrumbling = other.LevelNodeCrumbling.Clone();
          break;
        case ContentOneofCase.LevelNodeGroup:
          LevelNodeGroup = other.LevelNodeGroup.Clone();
          break;
        case ContentOneofCase.LevelNodeGravity:
          LevelNodeGravity = other.LevelNodeGravity.Clone();
          break;
        case ContentOneofCase.LevelNodeLobbyTerminal:
          LevelNodeLobbyTerminal = other.LevelNodeLobbyTerminal.Clone();
          break;
        case ContentOneofCase.LevelNodeTrigger:
          LevelNodeTrigger = other.LevelNodeTrigger.Clone();
          break;
        case ContentOneofCase.LevelNodeParticleEmitter:
          LevelNodeParticleEmitter = other.LevelNodeParticleEmitter.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNode Clone() {
      return new LevelNode(this);
    }

    /// <summary>Field number for the "isLocked" field.</summary>
    public const int IsLockedFieldNumber = 6;
    private bool isLocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLocked {
      get { return isLocked_; }
      set {
        isLocked_ = value;
      }
    }

    /// <summary>Field number for the "levelNodeStart" field.</summary>
    public const int LevelNodeStartFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeStart LevelNodeStart {
      get { return contentCase_ == ContentOneofCase.LevelNodeStart ? (global::COD.Types.LevelNodeStart) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeStart;
      }
    }

    /// <summary>Field number for the "levelNodeFinish" field.</summary>
    public const int LevelNodeFinishFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeFinish LevelNodeFinish {
      get { return contentCase_ == ContentOneofCase.LevelNodeFinish ? (global::COD.Types.LevelNodeFinish) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeFinish;
      }
    }

    /// <summary>Field number for the "levelNodeStatic" field.</summary>
    public const int LevelNodeStaticFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeStatic LevelNodeStatic {
      get { return contentCase_ == ContentOneofCase.LevelNodeStatic ? (global::COD.Types.LevelNodeStatic) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeStatic;
      }
    }

    /// <summary>Field number for the "levelNodeSign" field.</summary>
    public const int LevelNodeSignFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeSign LevelNodeSign {
      get { return contentCase_ == ContentOneofCase.LevelNodeSign ? (global::COD.Types.LevelNodeSign) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeSign;
      }
    }

    /// <summary>Field number for the "levelNodeCrumbling" field.</summary>
    public const int LevelNodeCrumblingFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeCrumbling LevelNodeCrumbling {
      get { return contentCase_ == ContentOneofCase.LevelNodeCrumbling ? (global::COD.Types.LevelNodeCrumbling) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeCrumbling;
      }
    }

    /// <summary>Field number for the "levelNodeGroup" field.</summary>
    public const int LevelNodeGroupFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeGroup LevelNodeGroup {
      get { return contentCase_ == ContentOneofCase.LevelNodeGroup ? (global::COD.Types.LevelNodeGroup) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeGroup;
      }
    }

    /// <summary>Field number for the "levelNodeGravity" field.</summary>
    public const int LevelNodeGravityFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeGravity LevelNodeGravity {
      get { return contentCase_ == ContentOneofCase.LevelNodeGravity ? (global::COD.Types.LevelNodeGravity) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeGravity;
      }
    }

    /// <summary>Field number for the "levelNodeLobbyTerminal" field.</summary>
    public const int LevelNodeLobbyTerminalFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeLobbyTerminal LevelNodeLobbyTerminal {
      get { return contentCase_ == ContentOneofCase.LevelNodeLobbyTerminal ? (global::COD.Types.LevelNodeLobbyTerminal) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeLobbyTerminal;
      }
    }

    /// <summary>Field number for the "levelNodeTrigger" field.</summary>
    public const int LevelNodeTriggerFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeTrigger LevelNodeTrigger {
      get { return contentCase_ == ContentOneofCase.LevelNodeTrigger ? (global::COD.Types.LevelNodeTrigger) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeTrigger;
      }
    }

    /// <summary>Field number for the "levelNodeParticleEmitter" field.</summary>
    public const int LevelNodeParticleEmitterFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeParticleEmitter LevelNodeParticleEmitter {
      get { return contentCase_ == ContentOneofCase.LevelNodeParticleEmitter ? (global::COD.Types.LevelNodeParticleEmitter) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeParticleEmitter;
      }
    }

    /// <summary>Field number for the "animations" field.</summary>
    public const int AnimationsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::COD.Types.Animation> _repeated_animations_codec
        = pb::FieldCodec.ForMessage(122, global::COD.Types.Animation.Parser);
    private readonly pbc::RepeatedField<global::COD.Types.Animation> animations_ = new pbc::RepeatedField<global::COD.Types.Animation>();
    /// <summary>
    ///A level node can have any number (might limit it in the UI) of named animations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::COD.Types.Animation> Animations {
      get { return animations_; }
    }

    /// <summary>Field number for the "activeAnimation" field.</summary>
    public const int ActiveAnimationFieldNumber = 16;
    private int activeAnimation_;
    /// <summary>
    ///Index into animations, -1 if it is not playing an animation at the start, ignored if there are no animations (so will default to 0 in that case)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveAnimation {
      get { return activeAnimation_; }
      set {
        activeAnimation_ = value;
      }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      LevelNodeStart = 1,
      LevelNodeFinish = 2,
      LevelNodeStatic = 3,
      LevelNodeSign = 4,
      LevelNodeCrumbling = 5,
      LevelNodeGroup = 7,
      LevelNodeGravity = 8,
      LevelNodeLobbyTerminal = 9,
      LevelNodeTrigger = 10,
      LevelNodeParticleEmitter = 11,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsLocked != other.IsLocked) return false;
      if (!object.Equals(LevelNodeStart, other.LevelNodeStart)) return false;
      if (!object.Equals(LevelNodeFinish, other.LevelNodeFinish)) return false;
      if (!object.Equals(LevelNodeStatic, other.LevelNodeStatic)) return false;
      if (!object.Equals(LevelNodeSign, other.LevelNodeSign)) return false;
      if (!object.Equals(LevelNodeCrumbling, other.LevelNodeCrumbling)) return false;
      if (!object.Equals(LevelNodeGroup, other.LevelNodeGroup)) return false;
      if (!object.Equals(LevelNodeGravity, other.LevelNodeGravity)) return false;
      if (!object.Equals(LevelNodeLobbyTerminal, other.LevelNodeLobbyTerminal)) return false;
      if (!object.Equals(LevelNodeTrigger, other.LevelNodeTrigger)) return false;
      if (!object.Equals(LevelNodeParticleEmitter, other.LevelNodeParticleEmitter)) return false;
      if(!animations_.Equals(other.animations_)) return false;
      if (ActiveAnimation != other.ActiveAnimation) return false;
      if (ContentCase != other.ContentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsLocked != false) hash ^= IsLocked.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeStart) hash ^= LevelNodeStart.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeFinish) hash ^= LevelNodeFinish.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeStatic) hash ^= LevelNodeStatic.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeSign) hash ^= LevelNodeSign.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) hash ^= LevelNodeCrumbling.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeGroup) hash ^= LevelNodeGroup.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeGravity) hash ^= LevelNodeGravity.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeLobbyTerminal) hash ^= LevelNodeLobbyTerminal.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeTrigger) hash ^= LevelNodeTrigger.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeParticleEmitter) hash ^= LevelNodeParticleEmitter.GetHashCode();
      hash ^= animations_.GetHashCode();
      if (ActiveAnimation != 0) hash ^= ActiveAnimation.GetHashCode();
      hash ^= (int) contentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (contentCase_ == ContentOneofCase.LevelNodeStart) {
        output.WriteRawTag(10);
        output.WriteMessage(LevelNodeStart);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeFinish) {
        output.WriteRawTag(18);
        output.WriteMessage(LevelNodeFinish);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeStatic) {
        output.WriteRawTag(26);
        output.WriteMessage(LevelNodeStatic);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeSign) {
        output.WriteRawTag(34);
        output.WriteMessage(LevelNodeSign);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) {
        output.WriteRawTag(42);
        output.WriteMessage(LevelNodeCrumbling);
      }
      if (IsLocked != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsLocked);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeGroup) {
        output.WriteRawTag(58);
        output.WriteMessage(LevelNodeGroup);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeGravity) {
        output.WriteRawTag(66);
        output.WriteMessage(LevelNodeGravity);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeLobbyTerminal) {
        output.WriteRawTag(74);
        output.WriteMessage(LevelNodeLobbyTerminal);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeTrigger) {
        output.WriteRawTag(82);
        output.WriteMessage(LevelNodeTrigger);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeParticleEmitter) {
        output.WriteRawTag(90);
        output.WriteMessage(LevelNodeParticleEmitter);
      }
      animations_.WriteTo(output, _repeated_animations_codec);
      if (ActiveAnimation != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ActiveAnimation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (contentCase_ == ContentOneofCase.LevelNodeStart) {
        output.WriteRawTag(10);
        output.WriteMessage(LevelNodeStart);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeFinish) {
        output.WriteRawTag(18);
        output.WriteMessage(LevelNodeFinish);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeStatic) {
        output.WriteRawTag(26);
        output.WriteMessage(LevelNodeStatic);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeSign) {
        output.WriteRawTag(34);
        output.WriteMessage(LevelNodeSign);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) {
        output.WriteRawTag(42);
        output.WriteMessage(LevelNodeCrumbling);
      }
      if (IsLocked != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsLocked);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeGroup) {
        output.WriteRawTag(58);
        output.WriteMessage(LevelNodeGroup);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeGravity) {
        output.WriteRawTag(66);
        output.WriteMessage(LevelNodeGravity);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeLobbyTerminal) {
        output.WriteRawTag(74);
        output.WriteMessage(LevelNodeLobbyTerminal);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeTrigger) {
        output.WriteRawTag(82);
        output.WriteMessage(LevelNodeTrigger);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeParticleEmitter) {
        output.WriteRawTag(90);
        output.WriteMessage(LevelNodeParticleEmitter);
      }
      animations_.WriteTo(ref output, _repeated_animations_codec);
      if (ActiveAnimation != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ActiveAnimation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsLocked != false) {
        size += 1 + 1;
      }
      if (contentCase_ == ContentOneofCase.LevelNodeStart) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeStart);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeFinish) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeFinish);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeStatic) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeStatic);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeSign) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeSign);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeCrumbling);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeGroup) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeGroup);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeGravity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeGravity);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeLobbyTerminal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeLobbyTerminal);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeTrigger) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeTrigger);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeParticleEmitter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeParticleEmitter);
      }
      size += animations_.CalculateSize(_repeated_animations_codec);
      if (ActiveAnimation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveAnimation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNode other) {
      if (other == null) {
        return;
      }
      if (other.IsLocked != false) {
        IsLocked = other.IsLocked;
      }
      animations_.Add(other.animations_);
      if (other.ActiveAnimation != 0) {
        ActiveAnimation = other.ActiveAnimation;
      }
      switch (other.ContentCase) {
        case ContentOneofCase.LevelNodeStart:
          if (LevelNodeStart == null) {
            LevelNodeStart = new global::COD.Types.LevelNodeStart();
          }
          LevelNodeStart.MergeFrom(other.LevelNodeStart);
          break;
        case ContentOneofCase.LevelNodeFinish:
          if (LevelNodeFinish == null) {
            LevelNodeFinish = new global::COD.Types.LevelNodeFinish();
          }
          LevelNodeFinish.MergeFrom(other.LevelNodeFinish);
          break;
        case ContentOneofCase.LevelNodeStatic:
          if (LevelNodeStatic == null) {
            LevelNodeStatic = new global::COD.Types.LevelNodeStatic();
          }
          LevelNodeStatic.MergeFrom(other.LevelNodeStatic);
          break;
        case ContentOneofCase.LevelNodeSign:
          if (LevelNodeSign == null) {
            LevelNodeSign = new global::COD.Types.LevelNodeSign();
          }
          LevelNodeSign.MergeFrom(other.LevelNodeSign);
          break;
        case ContentOneofCase.LevelNodeCrumbling:
          if (LevelNodeCrumbling == null) {
            LevelNodeCrumbling = new global::COD.Types.LevelNodeCrumbling();
          }
          LevelNodeCrumbling.MergeFrom(other.LevelNodeCrumbling);
          break;
        case ContentOneofCase.LevelNodeGroup:
          if (LevelNodeGroup == null) {
            LevelNodeGroup = new global::COD.Types.LevelNodeGroup();
          }
          LevelNodeGroup.MergeFrom(other.LevelNodeGroup);
          break;
        case ContentOneofCase.LevelNodeGravity:
          if (LevelNodeGravity == null) {
            LevelNodeGravity = new global::COD.Types.LevelNodeGravity();
          }
          LevelNodeGravity.MergeFrom(other.LevelNodeGravity);
          break;
        case ContentOneofCase.LevelNodeLobbyTerminal:
          if (LevelNodeLobbyTerminal == null) {
            LevelNodeLobbyTerminal = new global::COD.Types.LevelNodeLobbyTerminal();
          }
          LevelNodeLobbyTerminal.MergeFrom(other.LevelNodeLobbyTerminal);
          break;
        case ContentOneofCase.LevelNodeTrigger:
          if (LevelNodeTrigger == null) {
            LevelNodeTrigger = new global::COD.Types.LevelNodeTrigger();
          }
          LevelNodeTrigger.MergeFrom(other.LevelNodeTrigger);
          break;
        case ContentOneofCase.LevelNodeParticleEmitter:
          if (LevelNodeParticleEmitter == null) {
            LevelNodeParticleEmitter = new global::COD.Types.LevelNodeParticleEmitter();
          }
          LevelNodeParticleEmitter.MergeFrom(other.LevelNodeParticleEmitter);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::COD.Types.LevelNodeStart subBuilder = new global::COD.Types.LevelNodeStart();
            if (contentCase_ == ContentOneofCase.LevelNodeStart) {
              subBuilder.MergeFrom(LevelNodeStart);
            }
            input.ReadMessage(subBuilder);
            LevelNodeStart = subBuilder;
            break;
          }
          case 18: {
            global::COD.Types.LevelNodeFinish subBuilder = new global::COD.Types.LevelNodeFinish();
            if (contentCase_ == ContentOneofCase.LevelNodeFinish) {
              subBuilder.MergeFrom(LevelNodeFinish);
            }
            input.ReadMessage(subBuilder);
            LevelNodeFinish = subBuilder;
            break;
          }
          case 26: {
            global::COD.Types.LevelNodeStatic subBuilder = new global::COD.Types.LevelNodeStatic();
            if (contentCase_ == ContentOneofCase.LevelNodeStatic) {
              subBuilder.MergeFrom(LevelNodeStatic);
            }
            input.ReadMessage(subBuilder);
            LevelNodeStatic = subBuilder;
            break;
          }
          case 34: {
            global::COD.Types.LevelNodeSign subBuilder = new global::COD.Types.LevelNodeSign();
            if (contentCase_ == ContentOneofCase.LevelNodeSign) {
              subBuilder.MergeFrom(LevelNodeSign);
            }
            input.ReadMessage(subBuilder);
            LevelNodeSign = subBuilder;
            break;
          }
          case 42: {
            global::COD.Types.LevelNodeCrumbling subBuilder = new global::COD.Types.LevelNodeCrumbling();
            if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) {
              subBuilder.MergeFrom(LevelNodeCrumbling);
            }
            input.ReadMessage(subBuilder);
            LevelNodeCrumbling = subBuilder;
            break;
          }
          case 48: {
            IsLocked = input.ReadBool();
            break;
          }
          case 58: {
            global::COD.Types.LevelNodeGroup subBuilder = new global::COD.Types.LevelNodeGroup();
            if (contentCase_ == ContentOneofCase.LevelNodeGroup) {
              subBuilder.MergeFrom(LevelNodeGroup);
            }
            input.ReadMessage(subBuilder);
            LevelNodeGroup = subBuilder;
            break;
          }
          case 66: {
            global::COD.Types.LevelNodeGravity subBuilder = new global::COD.Types.LevelNodeGravity();
            if (contentCase_ == ContentOneofCase.LevelNodeGravity) {
              subBuilder.MergeFrom(LevelNodeGravity);
            }
            input.ReadMessage(subBuilder);
            LevelNodeGravity = subBuilder;
            break;
          }
          case 74: {
            global::COD.Types.LevelNodeLobbyTerminal subBuilder = new global::COD.Types.LevelNodeLobbyTerminal();
            if (contentCase_ == ContentOneofCase.LevelNodeLobbyTerminal) {
              subBuilder.MergeFrom(LevelNodeLobbyTerminal);
            }
            input.ReadMessage(subBuilder);
            LevelNodeLobbyTerminal = subBuilder;
            break;
          }
          case 82: {
            global::COD.Types.LevelNodeTrigger subBuilder = new global::COD.Types.LevelNodeTrigger();
            if (contentCase_ == ContentOneofCase.LevelNodeTrigger) {
              subBuilder.MergeFrom(LevelNodeTrigger);
            }
            input.ReadMessage(subBuilder);
            LevelNodeTrigger = subBuilder;
            break;
          }
          case 90: {
            global::COD.Types.LevelNodeParticleEmitter subBuilder = new global::COD.Types.LevelNodeParticleEmitter();
            if (contentCase_ == ContentOneofCase.LevelNodeParticleEmitter) {
              subBuilder.MergeFrom(LevelNodeParticleEmitter);
            }
            input.ReadMessage(subBuilder);
            LevelNodeParticleEmitter = subBuilder;
            break;
          }
          case 122: {
            animations_.AddEntriesFrom(input, _repeated_animations_codec);
            break;
          }
          case 128: {
            ActiveAnimation = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::COD.Types.LevelNodeStart subBuilder = new global::COD.Types.LevelNodeStart();
            if (contentCase_ == ContentOneofCase.LevelNodeStart) {
              subBuilder.MergeFrom(LevelNodeStart);
            }
            input.ReadMessage(subBuilder);
            LevelNodeStart = subBuilder;
            break;
          }
          case 18: {
            global::COD.Types.LevelNodeFinish subBuilder = new global::COD.Types.LevelNodeFinish();
            if (contentCase_ == ContentOneofCase.LevelNodeFinish) {
              subBuilder.MergeFrom(LevelNodeFinish);
            }
            input.ReadMessage(subBuilder);
            LevelNodeFinish = subBuilder;
            break;
          }
          case 26: {
            global::COD.Types.LevelNodeStatic subBuilder = new global::COD.Types.LevelNodeStatic();
            if (contentCase_ == ContentOneofCase.LevelNodeStatic) {
              subBuilder.MergeFrom(LevelNodeStatic);
            }
            input.ReadMessage(subBuilder);
            LevelNodeStatic = subBuilder;
            break;
          }
          case 34: {
            global::COD.Types.LevelNodeSign subBuilder = new global::COD.Types.LevelNodeSign();
            if (contentCase_ == ContentOneofCase.LevelNodeSign) {
              subBuilder.MergeFrom(LevelNodeSign);
            }
            input.ReadMessage(subBuilder);
            LevelNodeSign = subBuilder;
            break;
          }
          case 42: {
            global::COD.Types.LevelNodeCrumbling subBuilder = new global::COD.Types.LevelNodeCrumbling();
            if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) {
              subBuilder.MergeFrom(LevelNodeCrumbling);
            }
            input.ReadMessage(subBuilder);
            LevelNodeCrumbling = subBuilder;
            break;
          }
          case 48: {
            IsLocked = input.ReadBool();
            break;
          }
          case 58: {
            global::COD.Types.LevelNodeGroup subBuilder = new global::COD.Types.LevelNodeGroup();
            if (contentCase_ == ContentOneofCase.LevelNodeGroup) {
              subBuilder.MergeFrom(LevelNodeGroup);
            }
            input.ReadMessage(subBuilder);
            LevelNodeGroup = subBuilder;
            break;
          }
          case 66: {
            global::COD.Types.LevelNodeGravity subBuilder = new global::COD.Types.LevelNodeGravity();
            if (contentCase_ == ContentOneofCase.LevelNodeGravity) {
              subBuilder.MergeFrom(LevelNodeGravity);
            }
            input.ReadMessage(subBuilder);
            LevelNodeGravity = subBuilder;
            break;
          }
          case 74: {
            global::COD.Types.LevelNodeLobbyTerminal subBuilder = new global::COD.Types.LevelNodeLobbyTerminal();
            if (contentCase_ == ContentOneofCase.LevelNodeLobbyTerminal) {
              subBuilder.MergeFrom(LevelNodeLobbyTerminal);
            }
            input.ReadMessage(subBuilder);
            LevelNodeLobbyTerminal = subBuilder;
            break;
          }
          case 82: {
            global::COD.Types.LevelNodeTrigger subBuilder = new global::COD.Types.LevelNodeTrigger();
            if (contentCase_ == ContentOneofCase.LevelNodeTrigger) {
              subBuilder.MergeFrom(LevelNodeTrigger);
            }
            input.ReadMessage(subBuilder);
            LevelNodeTrigger = subBuilder;
            break;
          }
          case 90: {
            global::COD.Types.LevelNodeParticleEmitter subBuilder = new global::COD.Types.LevelNodeParticleEmitter();
            if (contentCase_ == ContentOneofCase.LevelNodeParticleEmitter) {
              subBuilder.MergeFrom(LevelNodeParticleEmitter);
            }
            input.ReadMessage(subBuilder);
            LevelNodeParticleEmitter = subBuilder;
            break;
          }
          case 122: {
            animations_.AddEntriesFrom(ref input, _repeated_animations_codec);
            break;
          }
          case 128: {
            ActiveAnimation = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
